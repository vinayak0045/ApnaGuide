{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "iNx97t_1x4dE",
        "outputId": "bcd49a2a-d081-49f1-cdd5-7659ebd133fd"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Mounted at /content/drive\n",
            "         Date Location  MinTemp  MaxTemp  Rainfall  Evaporation  Sunshine  \\\n",
            "0  2008-12-01   Albury     13.4     22.9       0.6          NaN       NaN   \n",
            "1  2008-12-02   Albury      7.4     25.1       0.0          NaN       NaN   \n",
            "2  2008-12-03   Albury     12.9     25.7       0.0          NaN       NaN   \n",
            "3  2008-12-04   Albury      9.2     28.0       0.0          NaN       NaN   \n",
            "4  2008-12-05   Albury     17.5     32.3       1.0          NaN       NaN   \n",
            "\n",
            "  WindGustDir  WindGustSpeed WindDir9am  ... Humidity3pm  Pressure9am  \\\n",
            "0           W           44.0          W  ...        22.0       1007.7   \n",
            "1         WNW           44.0        NNW  ...        25.0       1010.6   \n",
            "2         WSW           46.0          W  ...        30.0       1007.6   \n",
            "3          NE           24.0         SE  ...        16.0       1017.6   \n",
            "4           W           41.0        ENE  ...        33.0       1010.8   \n",
            "\n",
            "   Pressure3pm  Cloud9am  Cloud3pm  Temp9am  Temp3pm  RainToday  RISK_MM  \\\n",
            "0       1007.1       8.0       NaN     16.9     21.8         No      0.0   \n",
            "1       1007.8       NaN       NaN     17.2     24.3         No      0.0   \n",
            "2       1008.7       NaN       2.0     21.0     23.2         No      0.0   \n",
            "3       1012.8       NaN       NaN     18.1     26.5         No      1.0   \n",
            "4       1006.0       7.0       8.0     17.8     29.7         No      0.2   \n",
            "\n",
            "   RainTomorrow  \n",
            "0            No  \n",
            "1            No  \n",
            "2            No  \n",
            "3            No  \n",
            "4            No  \n",
            "\n",
            "[5 rows x 24 columns]\n",
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 105138 entries, 0 to 105137\n",
            "Data columns (total 24 columns):\n",
            " #   Column         Non-Null Count   Dtype  \n",
            "---  ------         --------------   -----  \n",
            " 0   Date           105138 non-null  object \n",
            " 1   Location       105138 non-null  object \n",
            " 2   MinTemp        104661 non-null  float64\n",
            " 3   MaxTemp        104908 non-null  float64\n",
            " 4   Rainfall       104013 non-null  float64\n",
            " 5   Evaporation    60954 non-null   float64\n",
            " 6   Sunshine       53709 non-null   float64\n",
            " 7   WindGustDir    99309 non-null   object \n",
            " 8   WindGustSpeed  99332 non-null   float64\n",
            " 9   WindDir9am     97039 non-null   object \n",
            " 10  WindDir3pm     102405 non-null  object \n",
            " 11  WindSpeed9am   103947 non-null  float64\n",
            " 12  WindSpeed3pm   103336 non-null  float64\n",
            " 13  Humidity9am    103811 non-null  float64\n",
            " 14  Humidity3pm    103383 non-null  float64\n",
            " 15  Pressure9am    95413 non-null   float64\n",
            " 16  Pressure3pm    95455 non-null   float64\n",
            " 17  Cloud9am       66340 non-null   float64\n",
            " 18  Cloud3pm       64499 non-null   float64\n",
            " 19  Temp9am        104337 non-null  float64\n",
            " 20  Temp3pm        103863 non-null  float64\n",
            " 21  RainToday      104012 non-null  object \n",
            " 22  RISK_MM        105137 non-null  float64\n",
            " 23  RainTomorrow   105137 non-null  object \n",
            "dtypes: float64(17), object(7)\n",
            "memory usage: 19.3+ MB\n",
            "None\n"
          ]
        }
      ],
      "source": [
        "import pandas as pd\n",
        "\n",
        "# Mount Google Drive to access files\n",
        "from google.colab import drive\n",
        "drive.mount('/content/drive')\n",
        "\n",
        "# Load the dataset\n",
        "url = '/content/weatherAUS.csv'\n",
        "df = pd.read_csv(url)\n",
        "\n",
        "# Display first few rows and check columns\n",
        "print(df.head())\n",
        "print(df.info())\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Check for missing values\n",
        "print(df.isnull().sum())\n",
        "\n",
        "# Drop rows with missing values (you may choose to handle missing values differently based on your analysis)\n",
        "df = df.dropna()\n",
        "\n",
        "# Convert categorical variables to numerical (if needed)\n",
        "df['RainTomorrow'] = df['RainTomorrow'].map({'No': 0, 'Yes': 1})\n",
        "\n",
        "# Explore statistical summary of numeric columns\n",
        "print(df.describe())\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "BqtMPHCWzmwZ",
        "outputId": "f8d3f9d1-3a22-40be-b0d2-1b7e2c01844f"
      },
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Date                 0\n",
            "Location             0\n",
            "MinTemp            477\n",
            "MaxTemp            230\n",
            "Rainfall          1125\n",
            "Evaporation      44184\n",
            "Sunshine         51429\n",
            "WindGustDir       5829\n",
            "WindGustSpeed     5806\n",
            "WindDir9am        8099\n",
            "WindDir3pm        2733\n",
            "WindSpeed9am      1191\n",
            "WindSpeed3pm      1802\n",
            "Humidity9am       1327\n",
            "Humidity3pm       1755\n",
            "Pressure9am       9725\n",
            "Pressure3pm       9683\n",
            "Cloud9am         38798\n",
            "Cloud3pm         40639\n",
            "Temp9am            801\n",
            "Temp3pm           1275\n",
            "RainToday         1126\n",
            "RISK_MM              1\n",
            "RainTomorrow         1\n",
            "dtype: int64\n",
            "            MinTemp       MaxTemp      Rainfall   Evaporation      Sunshine  \\\n",
            "count  43031.000000  43031.000000  43031.000000  43031.000000  43031.000000   \n",
            "mean      13.034582     23.456429      2.133213      5.301074      7.473659   \n",
            "std        6.176176      6.675807      6.998058      3.690197      3.802657   \n",
            "min       -6.700000      4.100000      0.000000      0.000000      0.000000   \n",
            "25%        8.400000     18.200000      0.000000      2.600000      4.600000   \n",
            "50%       12.900000     23.200000      0.000000      4.600000      8.300000   \n",
            "75%       17.800000     28.400000      0.800000      7.200000     10.500000   \n",
            "max       31.400000     48.100000    206.200000     81.200000     14.500000   \n",
            "\n",
            "       WindGustSpeed  WindSpeed9am  WindSpeed3pm   Humidity9am   Humidity3pm  \\\n",
            "count   43031.000000  43031.000000  43031.000000  43031.000000  43031.000000   \n",
            "mean       40.714578     15.779694     20.020264     67.997188     51.510121   \n",
            "std        13.593356      8.535333      8.871935     17.385823     19.905016   \n",
            "min         9.000000      2.000000      2.000000      0.000000      0.000000   \n",
            "25%        31.000000      9.000000     13.000000     57.000000     38.000000   \n",
            "50%        39.000000     15.000000     19.000000     68.000000     52.000000   \n",
            "75%        48.000000     20.000000     26.000000     81.000000     65.000000   \n",
            "max       122.000000     67.000000     76.000000    100.000000    100.000000   \n",
            "\n",
            "        Pressure9am   Pressure3pm      Cloud9am      Cloud3pm       Temp9am  \\\n",
            "count  43031.000000  43031.000000  43031.000000  43031.000000  43031.000000   \n",
            "mean    1017.705475   1015.373596      4.419093      4.490925     17.549320   \n",
            "std        6.818550      6.759479      2.774012      2.607922      6.281928   \n",
            "min      980.500000    979.000000      0.000000      0.000000     -0.700000   \n",
            "25%     1013.200000   1010.900000      1.000000      2.000000     12.700000   \n",
            "50%     1017.700000   1015.300000      5.000000      5.000000     17.200000   \n",
            "75%     1022.200000   1019.800000      7.000000      7.000000     22.400000   \n",
            "max     1040.200000   1037.300000      8.000000      9.000000     37.900000   \n",
            "\n",
            "            Temp3pm       RISK_MM  RainTomorrow  \n",
            "count  43031.000000  43031.000000  43031.000000  \n",
            "mean      21.940657      2.360271      0.227766  \n",
            "std        6.506227      8.694176      0.419396  \n",
            "min        3.700000      0.000000      0.000000  \n",
            "25%       16.900000      0.000000      0.000000  \n",
            "50%       21.700000      0.000000      0.000000  \n",
            "75%       26.600000      0.800000      0.000000  \n",
            "max       46.100000    278.400000      1.000000  \n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-2-11718b0e7de1>:8: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  df['RainTomorrow'] = df['RainTomorrow'].map({'No': 0, 'Yes': 1})\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Select features for prediction\n",
        "features = ['MinTemp', 'MaxTemp', 'Rainfall', 'Evaporation', 'Sunshine', 'WindGustSpeed',\n",
        "            'WindSpeed9am', 'WindSpeed3pm', 'Humidity9am', 'Humidity3pm', 'Pressure9am',\n",
        "            'Pressure3pm', 'Cloud9am', 'Cloud3pm', 'Temp9am', 'Temp3pm', 'RainToday']\n",
        "\n",
        "X = df[features]\n",
        "y = df['RainTomorrow']\n"
      ],
      "metadata": {
        "id": "ywS-Y82UzqgG"
      },
      "execution_count": 3,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.model_selection import train_test_split\n",
        "\n",
        "# Splitting the dataset into training and testing sets (you can adjust the test_size and random_state as needed)\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n"
      ],
      "metadata": {
        "id": "PqBP7-Hnzt2b"
      },
      "execution_count": 4,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.preprocessing import LabelEncoder\n",
        "\n",
        "# Initialize LabelEncoder\n",
        "label_encoder = LabelEncoder()\n",
        "\n",
        "# Encode 'RainToday' and 'RainTomorrow' to numerical values\n",
        "X_train['RainToday'] = label_encoder.fit_transform(X_train['RainToday'])\n",
        "X_test['RainToday'] = label_encoder.transform(X_test['RainToday'])\n",
        "\n",
        "y_train = label_encoder.fit_transform(y_train)\n",
        "y_test = label_encoder.transform(y_test)\n"
      ],
      "metadata": {
        "id": "YEpeusUwzxLo"
      },
      "execution_count": 7,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.ensemble import RandomForestClassifier\n",
        "from sklearn.metrics import accuracy_score, classification_report\n",
        "\n",
        "# Initialize the classifier (Random Forest is a good starting point)\n",
        "clf = RandomForestClassifier(random_state=42)\n",
        "\n",
        "# Train the model\n",
        "clf.fit(X_train, y_train)\n",
        "\n",
        "# Predict on the test data\n",
        "y_pred = clf.predict(X_test)\n",
        "\n",
        "# Evaluate the model\n",
        "accuracy = accuracy_score(y_test, y_pred)\n",
        "print(f'Accuracy: {accuracy}')\n",
        "\n",
        "# Classification report (provides precision, recall, F1-score)\n",
        "print(classification_report(y_test, y_pred))\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "K7u27R8R0Kal",
        "outputId": "16caee4b-d040-4202-a75d-339ac8a0e796"
      },
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Accuracy: 0.8561635877773905\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.87      0.95      0.91      6647\n",
            "           1       0.77      0.53      0.63      1960\n",
            "\n",
            "    accuracy                           0.86      8607\n",
            "   macro avg       0.82      0.74      0.77      8607\n",
            "weighted avg       0.85      0.86      0.85      8607\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Additional evaluation metrics\n",
        "from sklearn.metrics import confusion_matrix\n",
        "\n",
        "# Confusion matrix\n",
        "conf_matrix = confusion_matrix(y_test, y_pred)\n",
        "print('Confusion Matrix:')\n",
        "print(conf_matrix)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "jZRAyHAmz5NB",
        "outputId": "bd81dbfe-f470-466d-9f2f-6bcabc455215"
      },
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Confusion Matrix:\n",
            "[[6329  318]\n",
            " [ 920 1040]]\n"
          ]
        }
      ]
    }
  ]
}
