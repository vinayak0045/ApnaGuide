{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyNYogvRbIcGoxXF+/yHGBsu",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/HarshaVardhanVukkum/Apna-Guide/blob/main/Customer__churn.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "id": "twJgc5HFnLBX",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "01cb9fc1-2522-441d-bd46-47021fbfb6f1"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Mounted at /content/drive\n"
          ]
        }
      ],
      "source": [
        "# Mount Google Drive\n",
        "from google.colab import drive\n",
        "drive.mount('/content/drive')"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "\n",
        "# Load dataset\n",
        "url = '/content/telecom_dataset.csv'\n",
        "df = pd.read_csv(url)\n",
        "\n",
        "# Display first few rows and check columns\n",
        "print(df.head())\n",
        "print(df.info())\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Diu4rElptlvX",
        "outputId": "5d99892d-e859-4d70-af34-ea64729ae9d3"
      },
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "          cID  gender  SeniorCitizen Partner Dependents  tenure PhoneService  \\\n",
            "0  4223-BKEOR  Female              0      No        Yes      21          Yes   \n",
            "1  6035-RIIOM  Female              0      No         No      54          Yes   \n",
            "2  3797-VTIDR    Male              0     Yes         No       1           No   \n",
            "3  2568-BRGYX    Male              0      No         No       4          Yes   \n",
            "4  2775-SEFEE    Male              0      No        Yes       0          Yes   \n",
            "\n",
            "      MultipleLines InternetService OnlineSecurity  ... DeviceProtection  \\\n",
            "0                No             DSL            Yes  ...              Yes   \n",
            "1               Yes     Fiber optic             No  ...               No   \n",
            "2  No phone service             DSL             No  ...               No   \n",
            "3                No     Fiber optic             No  ...               No   \n",
            "4               Yes             DSL            Yes  ...               No   \n",
            "\n",
            "  TechSupport TV_Streaming Movie_Streaming        Contract PaperlessBilling  \\\n",
            "0          No           No             Yes        One year               No   \n",
            "1          No          Yes             Yes        Two year              Yes   \n",
            "2          No           No              No  Month-to-month              Yes   \n",
            "3          No           No              No  Month-to-month              Yes   \n",
            "4         Yes           No              No        Two year              Yes   \n",
            "\n",
            "              Method_Payment Charges_Month  TotalCharges Churn  \n",
            "0               Mailed check         64.85        1336.8    No  \n",
            "1  Bank transfer (automatic)         97.20       5129.45    No  \n",
            "2           Electronic check         23.45         23.45   Yes  \n",
            "3           Electronic check         70.20        237.95   Yes  \n",
            "4  Bank transfer (automatic)         61.90                  No  \n",
            "\n",
            "[5 rows x 21 columns]\n",
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 5634 entries, 0 to 5633\n",
            "Data columns (total 21 columns):\n",
            " #   Column            Non-Null Count  Dtype  \n",
            "---  ------            --------------  -----  \n",
            " 0   cID               5634 non-null   object \n",
            " 1   gender            5634 non-null   object \n",
            " 2   SeniorCitizen     5634 non-null   int64  \n",
            " 3   Partner           5634 non-null   object \n",
            " 4   Dependents        5634 non-null   object \n",
            " 5   tenure            5634 non-null   int64  \n",
            " 6   PhoneService      5634 non-null   object \n",
            " 7   MultipleLines     5634 non-null   object \n",
            " 8   InternetService   5634 non-null   object \n",
            " 9   OnlineSecurity    5634 non-null   object \n",
            " 10  OnlineBackup      5634 non-null   object \n",
            " 11  DeviceProtection  5634 non-null   object \n",
            " 12  TechSupport       5634 non-null   object \n",
            " 13  TV_Streaming      5634 non-null   object \n",
            " 14  Movie_Streaming   5634 non-null   object \n",
            " 15  Contract          5634 non-null   object \n",
            " 16  PaperlessBilling  5634 non-null   object \n",
            " 17  Method_Payment    5634 non-null   object \n",
            " 18  Charges_Month     5634 non-null   float64\n",
            " 19  TotalCharges      5634 non-null   object \n",
            " 20  Churn             5634 non-null   object \n",
            "dtypes: float64(1), int64(2), object(18)\n",
            "memory usage: 924.5+ KB\n",
            "None\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.preprocessing import StandardScaler, OneHotEncoder\n",
        "from sklearn.impute import SimpleImputer\n",
        "from sklearn.compose import ColumnTransformer\n",
        "from sklearn.pipeline import Pipeline\n",
        "\n",
        "# Separate features and target variable\n",
        "X = df.drop('Churn', axis=1)\n",
        "y = df['Churn']\n",
        "\n",
        "# Identify numeric and categorical features\n",
        "numeric_features = X.select_dtypes(include=['int64', 'float64']).columns\n",
        "categorical_features = X.select_dtypes(include=['object']).columns\n",
        "\n",
        "# Preprocessing pipeline\n",
        "numeric_transformer = Pipeline(steps=[\n",
        "    ('imputer', SimpleImputer(strategy='median')),\n",
        "    ('scaler', StandardScaler())\n",
        "])\n",
        "\n",
        "categorical_transformer = Pipeline(steps=[\n",
        "    ('imputer', SimpleImputer(strategy='most_frequent')),\n",
        "    ('onehot', OneHotEncoder(handle_unknown='ignore'))\n",
        "])\n",
        "\n",
        "preprocessor = ColumnTransformer(\n",
        "    transformers=[\n",
        "        ('num', numeric_transformer, numeric_features),\n",
        "        ('cat', categorical_transformer, categorical_features)\n",
        "    ])\n",
        "\n",
        "# Splitting the dataset into training and testing sets\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n"
      ],
      "metadata": {
        "id": "SvvOm7mAuhQ1"
      },
      "execution_count": 4,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.ensemble import RandomForestClassifier\n",
        "from sklearn.metrics import accuracy_score, f1_score\n",
        "\n",
        "# Initialize the classifier\n",
        "rf_classifier = RandomForestClassifier(random_state=42)\n",
        "\n",
        "# Create a pipeline with preprocessing and the classifier\n",
        "clf = Pipeline(steps=[('preprocessor', preprocessor),\n",
        "                      ('classifier', rf_classifier)])\n",
        "\n",
        "# Fit the model on the training data\n",
        "clf.fit(X_train, y_train)\n",
        "\n",
        "# Predict on the test data\n",
        "y_pred = clf.predict(X_test)\n",
        "\n",
        "# Calculate evaluation metrics\n",
        "accuracy = accuracy_score(y_test, y_pred)\n",
        "f1 = f1_score(y_test, y_pred, pos_label='Yes')  # Specify 'Yes' as the positive label\n",
        "\n",
        "print(f'Accuracy: {accuracy}')\n",
        "print(f'F1-score: {f1}')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "PigeABr_vD1L",
        "outputId": "8ea70396-0b22-4ea3-81ec-9be1b60c1e62"
      },
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Accuracy: 0.7852706299911268\n",
            "F1-score: 0.5236220472440944\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.model_selection import cross_val_score\n",
        "\n",
        "# Perform cross-validation\n",
        "cv_scores = cross_val_score(clf, X, y, cv=5, scoring='accuracy')\n",
        "mean_cv_accuracy = cv_scores.mean()\n",
        "\n",
        "print(f'Mean Cross-Validation Accuracy: {mean_cv_accuracy}')\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Po9vumL-vO2q",
        "outputId": "6bf454d0-713f-4b29-f283-853880378bcb"
      },
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Mean Cross-Validation Accuracy: 0.7893144376447003\n"
          ]
        }
      ]
    }
  ]
}
