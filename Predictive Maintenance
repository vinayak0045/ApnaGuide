{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "JCCy-zt35AHE",
        "outputId": "3c742db2-a378-4273-f8ed-2a3227db2333"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Mounted at /content/drive\n"
          ]
        }
      ],
      "source": [
        "from google.colab import drive\n",
        "drive.mount('/content/drive')\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "\n",
        "# Load train and test datasets\n",
        "train_file = '/content/train_FD001.txt'\n",
        "test_file = '/content/test_FD001.txt'\n",
        "\n",
        "# Assuming the dataset is in NASA's format (FD001), read the train and test files\n",
        "columns = ['unit_number', 'time_in_cycles', 'setting1', 'setting2', 'setting3', 's1', 's2', ..., 's21']\n",
        "train_df = pd.read_csv(train_file, sep=' ', header=None, names=columns, index_col=False)\n",
        "test_df = pd.read_csv(test_file, sep=' ', header=None, names=columns, index_col=False)\n",
        "\n",
        "# Display the first few rows and check columns\n",
        "print(\"Train Data:\")\n",
        "print(train_df.head())\n",
        "print(train_df.info())\n",
        "\n",
        "print(\"\\nTest Data:\")\n",
        "print(test_df.head())\n",
        "print(test_df.info())\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "bcGZWThx5gQq",
        "outputId": "08457d22-b3af-41a7-ffc9-d5827f775e71"
      },
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Train Data:\n",
            "   unit_number  time_in_cycles  setting1  setting2  setting3      s1      s2  \\\n",
            "0            1               1   -0.0007   -0.0004     100.0  518.67  641.82   \n",
            "1            1               2    0.0019   -0.0003     100.0  518.67  642.15   \n",
            "2            1               3   -0.0043    0.0003     100.0  518.67  642.35   \n",
            "3            1               4    0.0007    0.0000     100.0  518.67  642.35   \n",
            "4            1               5   -0.0019   -0.0002     100.0  518.67  642.37   \n",
            "\n",
            "   Ellipsis      s21  \n",
            "0   1589.70  1400.60  \n",
            "1   1591.82  1403.14  \n",
            "2   1587.99  1404.20  \n",
            "3   1582.79  1401.87  \n",
            "4   1582.85  1406.22  \n",
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 20631 entries, 0 to 20630\n",
            "Data columns (total 9 columns):\n",
            " #   Column          Non-Null Count  Dtype  \n",
            "---  ------          --------------  -----  \n",
            " 0   unit_number     20631 non-null  int64  \n",
            " 1   time_in_cycles  20631 non-null  int64  \n",
            " 2   setting1        20631 non-null  float64\n",
            " 3   setting2        20631 non-null  float64\n",
            " 4   setting3        20631 non-null  float64\n",
            " 5   s1              20631 non-null  float64\n",
            " 6   s2              20631 non-null  float64\n",
            " 7   Ellipsis        20631 non-null  float64\n",
            " 8   s21             20631 non-null  float64\n",
            "dtypes: float64(7), int64(2)\n",
            "memory usage: 1.4 MB\n",
            "None\n",
            "\n",
            "Test Data:\n",
            "   unit_number  time_in_cycles  setting1  setting2  setting3      s1      s2  \\\n",
            "0            1               1    0.0023    0.0003     100.0  518.67  643.02   \n",
            "1            1               2   -0.0027   -0.0003     100.0  518.67  641.71   \n",
            "2            1               3    0.0003    0.0001     100.0  518.67  642.46   \n",
            "3            1               4    0.0042    0.0000     100.0  518.67  642.44   \n",
            "4            1               5    0.0014    0.0000     100.0  518.67  642.51   \n",
            "\n",
            "   Ellipsis      s21  \n",
            "0   1585.29  1398.21  \n",
            "1   1588.45  1395.42  \n",
            "2   1586.94  1401.34  \n",
            "3   1584.12  1406.42  \n",
            "4   1587.19  1401.92  \n",
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 13096 entries, 0 to 13095\n",
            "Data columns (total 9 columns):\n",
            " #   Column          Non-Null Count  Dtype  \n",
            "---  ------          --------------  -----  \n",
            " 0   unit_number     13096 non-null  int64  \n",
            " 1   time_in_cycles  13096 non-null  int64  \n",
            " 2   setting1        13096 non-null  float64\n",
            " 3   setting2        13096 non-null  float64\n",
            " 4   setting3        13096 non-null  float64\n",
            " 5   s1              13096 non-null  float64\n",
            " 6   s2              13096 non-null  float64\n",
            " 7   Ellipsis        13096 non-null  float64\n",
            " 8   s21             13096 non-null  float64\n",
            "dtypes: float64(7), int64(2)\n",
            "memory usage: 920.9 KB\n",
            "None\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-2-e9d4dc38acac>:9: ParserWarning: Length of header or names does not match length of data. This leads to a loss of data with index_col=False.\n",
            "  train_df = pd.read_csv(train_file, sep=' ', header=None, names=columns, index_col=False)\n",
            "<ipython-input-2-e9d4dc38acac>:10: ParserWarning: Length of header or names does not match length of data. This leads to a loss of data with index_col=False.\n",
            "  test_df = pd.read_csv(test_file, sep=' ', header=None, names=columns, index_col=False)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Calculate Remaining Useful Life (RUL) for the training data\n",
        "max_cycles_train = train_df.groupby('unit_number')['time_in_cycles'].max().reset_index()\n",
        "max_cycles_train.rename(columns={'time_in_cycles': 'max_cycles'}, inplace=True)\n",
        "\n",
        "train_df = train_df.merge(max_cycles_train, on='unit_number', how='left')\n",
        "train_df['RUL'] = train_df['max_cycles'] - train_df['time_in_cycles']\n",
        "train_df.drop('max_cycles', axis=1, inplace=True)\n",
        "\n",
        "print(train_df.head())\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "_HNvPwC76En4",
        "outputId": "ff0fd9bf-fd0c-4eac-fe84-4b191d9c4f3a"
      },
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "   unit_number  time_in_cycles  setting1  setting2  setting3      s1      s2  \\\n",
            "0            1               1   -0.0007   -0.0004     100.0  518.67  641.82   \n",
            "1            1               2    0.0019   -0.0003     100.0  518.67  642.15   \n",
            "2            1               3   -0.0043    0.0003     100.0  518.67  642.35   \n",
            "3            1               4    0.0007    0.0000     100.0  518.67  642.35   \n",
            "4            1               5   -0.0019   -0.0002     100.0  518.67  642.37   \n",
            "\n",
            "   Ellipsis      s21  RUL  \n",
            "0   1589.70  1400.60  191  \n",
            "1   1591.82  1403.14  190  \n",
            "2   1587.99  1404.20  189  \n",
            "3   1582.79  1401.87  188  \n",
            "4   1582.85  1406.22  187  \n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.preprocessing import StandardScaler\n",
        "\n",
        "# Ensure column names are of string type\n",
        "train_df_scaled.columns = train_df_scaled.columns.astype(str)\n",
        "\n",
        "# Scale the numerical features\n",
        "scaler = StandardScaler()\n",
        "train_df_scaled.iloc[:, 2:] = scaler.fit_transform(train_df_scaled.iloc[:, 2:])\n",
        "\n",
        "print(train_df_scaled.head())\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "AfqlnknI6J03",
        "outputId": "fd9cb148-c593-467e-bcb5-0850669b4e0b"
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "   unit_number  time_in_cycles  setting1  setting2  setting3   s1        s2  \\\n",
            "0            1               1 -0.315980 -1.372953       0.0  0.0 -1.721725   \n",
            "1            1               2  0.872722 -1.031720       0.0  0.0 -1.061780   \n",
            "2            1               3 -1.961874  1.015677       0.0  0.0 -0.661813   \n",
            "3            1               4  0.324090 -0.008022       0.0  0.0 -0.661813   \n",
            "4            1               5 -0.864611 -0.690488       0.0  0.0 -0.621816   \n",
            "\n",
            "   Ellipsis       s21       RUL  \n",
            "0 -0.134255 -0.925936  1.207796  \n",
            "1  0.211528 -0.643726  1.193277  \n",
            "2 -0.413166 -0.525953  1.178759  \n",
            "3 -1.261314 -0.784831  1.164241  \n",
            "4 -1.251528 -0.301518  1.149723  \n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Example: Rolling mean and standard deviation of 's1' sensor readings\n",
        "train_df_scaled['s1_mean'] = train_df_scaled['s1'].rolling(window=10).mean()\n",
        "train_df_scaled['s1_std'] = train_df_scaled['s1'].rolling(window=10).std()\n",
        "\n",
        "print(train_df_scaled.head(15))\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "LK8BEmtZ6a7X",
        "outputId": "c321cc26-1050-4fa7-ff72-b7a9cbb3ef3a"
      },
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "    unit_number  time_in_cycles  setting1  setting2  setting3   s1        s2  \\\n",
            "0             1               1 -0.315980 -1.372953       0.0  0.0 -1.721725   \n",
            "1             1               2  0.872722 -1.031720       0.0  0.0 -1.061780   \n",
            "2             1               3 -1.961874  1.015677       0.0  0.0 -0.661813   \n",
            "3             1               4  0.324090 -0.008022       0.0  0.0 -0.661813   \n",
            "4             1               5 -0.864611 -0.690488       0.0  0.0 -0.621816   \n",
            "5             1               6 -1.961874 -0.349255       0.0  0.0 -1.161771   \n",
            "6             1               7  0.461248  0.333211       0.0  0.0 -0.401834   \n",
            "7             1               8 -1.550401  1.015677       0.0  0.0 -0.241847   \n",
            "8             1               9  0.369810  0.333211       0.0  0.0 -1.121775   \n",
            "9             1              10 -1.504681  0.333211       0.0  0.0 -1.941707   \n",
            "10            1              11  0.827003 -1.031720       0.0  0.0 -0.801801   \n",
            "11            1              12  0.735564  0.674444       0.0  0.0 -1.241765   \n",
            "12            1              13 -0.864611  1.356910       0.0  0.0  0.778069   \n",
            "13            1              14  0.415529 -0.008022       0.0  0.0 -0.661813   \n",
            "14            1              15 -0.818892 -1.031720       0.0  0.0 -0.501826   \n",
            "\n",
            "    Ellipsis       s21       RUL  s1_mean  s1_std  \n",
            "0  -0.134255 -0.925936  1.207796      NaN     NaN  \n",
            "1   0.211528 -0.643726  1.193277      NaN     NaN  \n",
            "2  -0.413166 -0.525953  1.178759      NaN     NaN  \n",
            "3  -1.261314 -0.784831  1.164241      NaN     NaN  \n",
            "4  -1.251528 -0.301518  1.149723      NaN     NaN  \n",
            "5  -0.987297 -1.173703  1.135205      NaN     NaN  \n",
            "6   0.293081 -1.240367  1.120687      NaN     NaN  \n",
            "7  -1.233586 -0.884827  1.106169      NaN     NaN  \n",
            "8   0.074520 -1.570353  1.091650      NaN     NaN  \n",
            "9   0.116927 -0.941491  1.077132      0.0     0.0  \n",
            "10 -1.430944 -0.921492  1.062614      0.0     0.0  \n",
            "11 -1.160189 -0.975934  1.048096      0.0     0.0  \n",
            "12 -1.359178 -0.900382  1.033578      0.0     0.0  \n",
            "13  0.395838 -1.085929  1.019060      0.0     0.0  \n",
            "14 -1.093316 -0.755943  1.004542      0.0     0.0  \n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Check for missing values in X_train\n",
        "missing_values = X_train.isnull().sum()\n",
        "print(missing_values)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "29xqdxAJ6cZY",
        "outputId": "3a075515-d306-4eac-8dbc-e07f8a90d866"
      },
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "setting1    0\n",
            "setting2    0\n",
            "setting3    0\n",
            "s1          0\n",
            "s2          0\n",
            "Ellipsis    0\n",
            "s21         0\n",
            "s1_mean     9\n",
            "s1_std      9\n",
            "dtype: int64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "from sklearn.linear_model import LinearRegression\n",
        "from sklearn.metrics import mean_squared_error\n",
        "from sklearn.impute import SimpleImputer\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "\n",
        "# Assuming X_train, y_train are already defined with missing values\n",
        "# Instantiate SimpleImputer to handle missing values\n",
        "imputer = SimpleImputer(strategy='mean')  # You can use 'median', 'most_frequent', etc. based on your data\n",
        "\n",
        "# Fit and transform the imputer on X_train\n",
        "X_train_imputed = imputer.fit_transform(X_train)\n",
        "\n",
        "# Initialize the model\n",
        "model = LinearRegression()\n",
        "\n",
        "# Fit the model on imputed training data\n",
        "model.fit(X_train_imputed, y_train)\n",
        "\n",
        "# Preprocess X_test similarly if needed\n",
        "# X_test_imputed = imputer.transform(X_test)\n",
        "\n",
        "# Example: Calculate RMSE\n",
        "# y_pred = model.predict(X_test_imputed)\n",
        "# rmse = mean_squared_error(y_test, y_pred, squared=False)\n",
        "# print(f'Root Mean Squared Error (RMSE): {rmse}')\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 74
        },
        "id": "bFXpw5Pp6xXZ",
        "outputId": "bc47fb1c-bb32-4a99-f4c9-5b54b7d3f00f"
      },
      "execution_count": 24,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "LinearRegression()"
            ],
            "text/html": [
              "<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LinearRegression()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">LinearRegression</label><div class=\"sk-toggleable__content\"><pre>LinearRegression()</pre></div></div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 24
        }
      ]
    }
  ]
}
